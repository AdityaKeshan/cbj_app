name: cybear_jinni
description: CyBear Jinni app to interact with your CyBear Jinni Smart Devices
version: 1.1.0+20
homepage: https://github.com/CyBear-Jinni/CBJ_App
author: Guy Luz

# The following line prevents the package from being accidentally published to
# pub.dev using `pub publish`. This is preferred for private packages.
publish_to: 'none' # Remove this line if you wish to publish to pub.dev

# The following defines the version and build number for your application.
# A version number is three numbers separated by dots, like 1.2.43
# followed by an optional build number separated by a +.
# Both the version and the builder number may be overridden in flutter
# build by specifying --build-name and --build-number, respectively.
# In Android, build-name is used as versionName while build-number used as versionCode.
# Read more about Android versioning at https://developer.android.com/studio/publish/versioning
# In iOS, build-name is used as CFBundleShortVersionString while build-number used as CFBundleVersion.
# Read more about iOS versioning at
# https://developer.apple.com/library/archive/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html


environment:
  sdk: ">=2.9.0 <3.0.0"

dependencies:
  # A action bottom sheet that adapts to the platform
  adaptive_action_sheet: ^1.0.11
  # Collection of some cool and awesome text animations.
  animated_text_kit: ^4.2.1
  # Declarative routing solution, where everything needed for navigation is automatically generated for you.
  auto_route: ^0.6.9
  # Helps implement the BLoC pattern.
  bloc: ^7.0.0
  # Copy text from and to clipboard
  clipboard: ^0.1.2+8
  # Copy text to clipboard
  clipboard_manager: ^0.0.4
  cloud_firestore: ^0.16.0
  # Allow discover network connectivity
  connectivity: ^3.0.4
  # The following adds the Cupertino Icons font to your application.
  # Use with the CupertinoIcons class for iOS style icons.
  cupertino_icons: ^1.0.0
  # Functional programming thingies, let you use multiple return types
  dartz: ^0.9.2
  # Get current device information from within the Flutter application.
  device_info: ^2.0.1
  # Internationalization (Easy translations)
  easy_localization: ^2.3.3
  # Easy implementation of a Expansion type card
  expansion_card: ^0.1.0
  # Plugin to use the Google Analytics for Firebase API.
  firebase_analytics: ^7.0.1
  firebase_auth: ^0.20.0+1
  firebase_auth_web: ^0.3.3
  firebase_core: ^0.7.0
  flushbar: ^1.10.4
  flutter:
    sdk: flutter
  # Bloc for state management, replace StatefulWidget
  flutter_bloc: ^7.0.0
  # A cross platform plugin for displaying local notifications.
  flutter_local_notifications: ^4.0.0
  # Getting the local timezone of the os.
  flutter_native_timezone: ^1.0.4
  # An easy to implement custom switch
  flutter_switch: ^0.3.1
  fluttertoast: ^8.0.7
  font_awesome_flutter: ^9.0.0
  # Annotations for freezed
  freezed_annotation: ^0.12.0
  # Service locator
  get_it: ^7.1.3
  # Secure authentication system for signing in with a Google account on Android and iOS
  google_sign_in: ^4.5.9
  # A high performance, open source, general RPC framework that puts mobile and HTTP/2 first.
  grpc: ^2.9.0
  # Lightweight and blazing fast key-value database
  hive: ^1.4.4+1
  hive_flutter: ^0.3.1
  # A composable, multi-platform, Future-based API for HTTP requests.
  http: ^0.12.2
  # Convenient code generator for get_it
  injectable: ^1.0.7
  # Allow you to have a screen at launcher for example
  introduction_screen: ^2.1.0
  # Defines the annotations used by json_serializable to create code for JSON serialization and deserialization.
  json_annotation: ^3.1.1
  # Dart Build System builders for handling JSON.
  json_serializable: ^3.5.1
  # Port of Kotlin's Kotlin Standard library for Dart/Flutter projects
  kt_dart: ^0.9.1
  # Liquid progress indicator for Flutter.
  liquid_progress_indicator: ^0.3.2
  # Finding commonly used locations on the filesystem
  path_provider: ^1.6.27
  # Popup that ask for the requested permission
  permission_handler: ^5.0.1+1
  # Provides runtime support for a Dart implementation of protobufs.
  protobuf: ^1.1.0
  # A wrapper around InheritedWidget to make them easier to use and more reusable.
  provider: ^5.0.0
  # Generate random colors that are visually pleasing
  random_color: ^1.0.5
  # Implementation of the popular reactiveX api for asynchronous programming
  rxdart: ^0.27.0
  # reading and writing simple key-value pairs
  shared_preferences: ^0.5.12+4
  # Simple, fast generation of RFC4122 UUIDs.
  uuid: ^2.2.2
  # Information about a device's connection to wifi
  wifi_info_flutter: ^2.0.1
  # Get available wifi ssid list, user can connect to wifi with ssid and password, and create hotspot
  wifi_iot: ^0.3.3

dependency_overrides:
  intl: ^0.17.0-nullsafety.2

dev_dependencies:
  # Generator for auto_route library.
  auto_route_generator: ^0.6.10
  build_runner:
  e2e: ^0.7.0+1
  flutter_driver:
    sdk: flutter
  flutter_launcher_icons: ^0.8.1
  flutter_test:
    sdk: flutter
  # Code generator for unions/pattern-matching/copy.
  freezed: ^0.12.7
  hive_generator: ^0.8.2
  injectable_generator: ^1.0.7
  # Collection of lint rules for Dart and Flutter projects.
  lint: ^1.4.0-dev.d210.1
  mockito: ^4.1.4
# For information on the generic Dart part of this file, see the
# following page: https://dart.dev/tools/pub/pubspec

flutter_icons:
  ios: true
  android: true
  image_path: "assets/cbj_app_icon.png"
#  image_path_ios: "assets/cbj_app_icon.png"
#  image_path_android: "assets/cbj_app_icon.png"
  adaptive_icon_background: "assets/cbj_app_icon.png"
  adaptive_icon_foreground: "assets/cbj_app_icon.png"

# The following section is specific to Flutter.
flutter:

  # The following line ensures that the Material Icons font is
  # included with your application, so that you can use the icons in
  # the material Icons class.
  uses-material-design: true
  assets:
    - assets/
    - assets/symbols/
    - assets/translations/
    - assets/gif/

  fonts:
    - family: gidole_regular
      fonts:
        - asset: assets/gidole_regular.ttf
  # To add assets to your application, add an assets section, like this:
  # assets:
  #   - images/a_dot_burr.jpeg
  #   - images/a_dot_ham.jpeg

  # An image asset can refer to one or more resolution-specific "variants", see
  # https://flutter.dev/assets-and-images/#resolution-aware.

  # For details regarding adding assets from package dependencies, see
  # https://flutter.dev/assets-and-images/#from-packages

  # To add custom fonts to your application, add a fonts section here,
  # in this "flutter" section. Each entry in this list should have a
  # "family" key with the font family name, and a "fonts" key with a
  # list giving the asset and other descriptors for the font. For
  # example:
  # fonts:
  #   - family: Schyler
  #     fonts:
  #       - asset: fonts/Schyler-Regular.ttf
  #       - asset: fonts/Schyler-Italic.ttf
  #         style: italic
  #   - family: Trajan Pro
  #     fonts:
  #       - asset: fonts/TrajanPro.ttf
  #       - asset: fonts/TrajanPro_Bold.ttf
  #         weight: 700
  #
  # For details regarding fonts from package dependencies,
  # see https://flutter.dev/custom-fonts/#from-packages
